# This file should be encrypted using ansible-vault
# Encrypt with: ansible-vault encrypt vault.yml

api_gateway:
  staging:
    RABBITMQ_HOST: billing-queue
    RABBITMQ_PORT: "5672"
    RABBITMQ_USER: rabbit_user
    RABBITMQ_PASSWORD: rabbit_password # masked
    RABBITMQ_QUEUE: billing_queue
    RABBITMQ_API_URL: "amqp://rabbit_user:rabbit_password@billing-queue:5672"
    INVENTORY_URL: "http://inventory-app:8080/api/movies"
  prod:
    RABBITMQ_HOST: billing-queue
    RABBITMQ_PORT: "5672"
    RABBITMQ_USER: rabbit_user
    RABBITMQ_PASSWORD: rabbit_password # masked
    RABBITMQ_QUEUE: billing_queue
    RABBITMQ_API_URL: "amqp://rabbit_user:rabbit_password@billing-queue:5672"
    INVENTORY_URL: "http://inventory-app:8080/api/movies"

billing_service:
  staging:
    DB_HOST: billing-db
    DB_PORT: "5432"
    DB_NAME: billing_db
    DB_USER: billing_user
    DB_PASSWORD: billing_db_password # masked
    RABBITMQ_HOST: billing-queue
    RABBITMQ_PORT: "5672"
    RABBITMQ_USER: rabbit_user
    RABBITMQ_PASSWORD: rabbit_password # masked
    RABBITMQ_QUEUE: billing_queue
    RABBITMQ_API_URL: "amqp://rabbit_user:rabbit_password@billing-queue:5672"
  prod:
    DB_HOST: billing-db
    DB_PORT: "5432"
    DB_NAME: billing_db
    DB_USER: billing_user
    DB_PASSWORD: billing_db_password # masked
    RABBITMQ_HOST: billing-queue
    RABBITMQ_PORT: "5672"
    RABBITMQ_USER: rabbit_user
    RABBITMQ_PASSWORD: rabbit_password # masked
    RABBITMQ_QUEUE: billing_queue
    RABBITMQ_API_URL: "amqp://rabbit_user:rabbit_password@billing-queue:5672"

inventory_service:
  staging:
    DB_HOST: inventory-db
    DB_PORT: "5432"
    DB_NAME: inventory_db
    DB_USER: inventory_user2
    DB_PASSWORD: inventory_password # masked
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres # masked
    HOST: 0.0.0.0
    PORT: "8080"
  prod:
    DB_HOST: inventory-db
    DB_PORT: "5432"
    DB_NAME: inventory_db
    DB_USER: inventory_user
    DB_PASSWORD: inventory_password # masked
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres # masked
    HOST: 0.0.0.0
    PORT: "8080"

global:
  AWS_DEFAULT_REGION: your_aws_region
  AWS_ACCESS_KEY_ID: key_goes_here # masked
  AWS_SECRET_ACCESS_KEY: key_goes_here # masked
  DOCKER_HUB_USERNAME: username
  DOCKER_HUB_PASSWORD: password # masked
  DOCKER_HUB_REPO: repositoryName

terraform:
  common:
    TF_VAR_cli_admin_username: cli_admin
  staging:
    TF_VAR_vpc_cidr: 10.1.0.0/16
    TF_VAR_public_subnet_cidrs: ["10.1.1.0/24", "10.1.2.0/24"]
    TF_VAR_private_subnet_cidrs: ["10.1.11.0/24", "10.1.12.0/24"]
    TF_VAR_availability_zones: ["eu-north-1a", "eu-north-1b"]
    TF_VAR_cluster_name: your-cluster-staging
    TF_VAR_cluster_version: "1.32"
    TF_VAR_node_instance_types: ["t3.medium"]
    TF_VAR_capacity_type: SPOT
    TF_VAR_desired_capacity: 1
    TF_VAR_min_capacity: 1
    TF_VAR_max_capacity: 1
  prod:
    TF_VAR_vpc_cidr: 10.0.0.0/16
    TF_VAR_public_subnet_cidrs: ["10.0.1.0/24", "10.0.2.0/24"]
    TF_VAR_private_subnet_cidrs: ["10.0.11.0/24", "10.0.12.0/24"]
    TF_VAR_availability_zones: ["eu-north-1a", "eu-north-1b"]
    TF_VAR_cluster_name: your-cluster-production
    TF_VAR_cluster_version: "1.32"
    TF_VAR_node_instance_types: ["t3.medium"]
    TF_VAR_capacity_type: SPOT
    TF_VAR_desired_capacity: 1
    TF_VAR_min_capacity: 1
    TF_VAR_max_capacity: 1
