---
- name: Ensure GitLab API token is provided
  fail:
    msg: "GitLab API token must be provided. Set gitlab_api_token variable."
  when: gitlab_api_token | length == 0

- name: Add SSH key to GitLab root user
  uri:
    url: "{{ gitlab_url }}/api/v4/user/keys"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      title: "{{ ssh_key_title }}"
      key: "{{ lookup('file', ssh_key_path) }}"
    status_code: [201, 400] # 400 means key already exists, we'll consider that success too
  register: ssh_key_result
  failed_when: >
    ssh_key_result.status != 201 and
    (ssh_key_result.status != 400 or 
     ('message' in ssh_key_result.json and 
      'fingerprint_sha256' not in ssh_key_result.json.message and 
      'already in use' not in ssh_key_result.json.message | default('')))

- name: Create GitLab repositories
  gitlab_project:
    api_url: "{{ gitlab_url }}"
    api_token: "{{ gitlab_api_token }}"
    validate_certs: "{{ gitlab_validate_certs }}"
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    visibility: "{{ item.visibility }}"
    initialize_with_readme: "{{ item.initialize_with_readme }}"
    default_branch: "{{ item.default_branch }}"
    state: present
  loop: "{{ repositories }}"
  register: gitlab_projects

- name: Display created GitLab repositories
  debug:
    msg: "Created repository '{{ item.item.name }}' with URL: {{ gitlab_url }}/root/{{ item.item.name }}"
  loop: "{{ gitlab_projects.results }}"
  when: item.changed

- name: Create temporary directory for cloning repositories
  tempfile:
    state: directory
    suffix: git_repos
  register: temp_dir

- name: Clone repositories and add project structure
  block:
    - name: Clone repositories
      git:
        repo: "http://oauth2:{{ gitlab_api_token }}@{{ gitlab_url | replace('http://', '') }}/root/{{ item.item.name }}.git"
        dest: "{{ temp_dir.path }}/{{ item.item.name }}"
        accept_hostkey: yes
        force: yes
      loop: "{{ gitlab_projects.results }}"
      register: cloned_repos
      ignore_errors: yes

    - name: Create API Gateway structure
      include_tasks: setup_api_gateway.yml
      vars:
        repo_name: "api-gateway"
      when: temp_dir.path is defined

    - name: Create Billing Service structure
      include_tasks: setup_billing_service.yml
      vars:
        repo_name: "billing-service"
      when: temp_dir.path is defined

    - name: Create Inventory Service structure
      include_tasks: setup_inventory_service.yml
      vars:
        repo_name: "inventory-service"
      when: temp_dir.path is defined

    - name: Create Infrastructure structure
      include_tasks: setup_infrastructure.yml
      vars:
        repo_name: "infrastructure"
      when: temp_dir.path is defined

  always:
    - name: Clean up temporary directory
      file:
        path: "{{ temp_dir.path }}"
        state: absent
      when: temp_dir.path is defined

- name: Get API Gateway project ID
  uri:
    url: "{{ gitlab_url }}/api/v4/projects?search=api-gateway"
    method: GET
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    status_code: 200
    return_content: true
  register: api_gateway_project

- name: Get Billing Service project ID
  uri:
    url: "{{ gitlab_url }}/api/v4/projects?search=billing-service"
    method: GET
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    status_code: 200
    return_content: true
  register: billing_service_project

- name: Get Inventory Service project ID
  uri:
    url: "{{ gitlab_url }}/api/v4/projects?search=inventory-service"
    method: GET
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    status_code: 200
    return_content: true
  register: inventory_service_project

- name: Create API Gateway environment variables
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ api_gateway_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.var_name }}"
      value: "{{ item.var_value }}"
      protected: "{{ item.protected | default(false) }}"
      masked: "{{ item.masked | default(false) }}"
    status_code: [201, 400]
  with_items: "{{ api_gateway_vars }}"
  register: api_gateway_variables
  ignore_errors: yes
  when: api_gateway_project is defined and api_gateway_project.json is defined

- name: Create Billing Service environment variables
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ billing_service_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.var_name }}"
      value: "{{ item.var_value }}"
      protected: "{{ item.protected | default(false) }}"
      masked: "{{ item.masked | default(false) }}"
    status_code: [201, 400]
  with_items: "{{ billing_service_vars }}"
  register: billing_vars
  ignore_errors: yes
  when: billing_service_project is defined and billing_service_project.json is defined

- name: Create Inventory Service environment variables
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ inventory_service_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.var_name }}"
      value: "{{ item.var_value }}"
      protected: "{{ item.protected | default(false) }}"
      masked: "{{ item.masked | default(false) }}"
    status_code: [201, 400]
  with_items: "{{ inventory_service_vars }}"
  register: inventory_vars
  ignore_errors: yes
  when: inventory_service_project is defined and inventory_service_project.json is defined

- name: Create Global CI/CD environment variables for API Gateway
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ api_gateway_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.var_name }}"
      value: "{{ item.var_value }}"
      protected: "{{ item.protected | default(false) }}"
      masked: "{{ item.masked | default(false) }}"
    status_code: [201, 400]
  with_items: "{{ global_vars }}"
  register: api_gateway_global_vars
  ignore_errors: yes
  when: api_gateway_project is defined and api_gateway_project.json is defined

- name: Create Global CI/CD environment variables for Billing Service
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ billing_service_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.var_name }}"
      value: "{{ item.var_value }}"
      protected: "{{ item.protected | default(false) }}"
      masked: "{{ item.masked | default(false) }}"
    status_code: [201, 400]
  with_items: "{{ global_vars }}"
  register: billing_service_global_vars
  ignore_errors: yes
  when: billing_service_project is defined and billing_service_project.json is defined

- name: Create Global CI/CD environment variables for Inventory Service
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ inventory_service_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.var_name }}"
      value: "{{ item.var_value }}"
      protected: "{{ item.protected | default(false) }}"
      masked: "{{ item.masked | default(false) }}"
    status_code: [201, 400]
  with_items: "{{ global_vars }}"
  register: inventory_service_global_vars
  ignore_errors: yes
  when: inventory_service_project is defined and inventory_service_project.json is defined

- name: Create CI/CD variable for GitLab Registry URL
  uri:
    url: "{{ gitlab_url }}/api/v4/admin/ci/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "GITLAB_REGISTRY_URL"
      value: "{{ gitlab_registry_url }}"
      protected: false
      masked: false
      variable_type: "env_var"
    status_code: [201, 400]
    validate_certs: "{{ gitlab_validate_certs }}"
  ignore_errors: yes
  register: create_registry_url_variable_result

- name: Create CI/CD variable for GitLab Registry Password
  uri:
    url: "{{ gitlab_url }}/api/v4/admin/ci/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "GITLAB_REGISTRY_PASSWORD"
      value: "{{ gitlab_registry_password }}"
      protected: true
      masked: true
      variable_type: "env_var"
    status_code: [201, 400]
    validate_certs: "{{ gitlab_validate_certs }}"
  ignore_errors: yes
  register: create_registry_password_variable_result

- name: Set Docker Hub credentials for API Gateway project
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ api_gateway_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.key }}"
      value: "{{ item.value }}"
      protected: "{{ item.protected | default(true) }}"
      masked: "{{ item.masked | default(true) }}"
    status_code: [201, 400]
  loop:
    - {
        key: "DOCKER_HUB_USERNAME",
        value: "{{ global.DOCKER_HUB_USERNAME }}",
        masked: false,
      }
    - {
        key: "DOCKER_HUB_PASSWORD",
        value: "{{ global.DOCKER_HUB_PASSWORD }}",
        masked: true,
      }
    - {
        key: "DOCKER_HUB_REPO",
        value: "{{ global.DOCKER_HUB_REPO }}",
        masked: true,
      }
  register: api_gateway_docker_vars
  ignore_errors: yes
  when: api_gateway_project is defined and api_gateway_project.json is defined
  no_log: true

- name: Set Docker Hub credentials for Billing Service project
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ billing_service_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.key }}"
      value: "{{ item.value }}"
      protected: "{{ item.protected | default(true) }}"
      masked: "{{ item.masked | default(true) }}"
    status_code: [201, 400]
  loop:
    - {
        key: "DOCKER_HUB_USERNAME",
        value: "{{ global.DOCKER_HUB_USERNAME }}",
        masked: false,
      }
    - {
        key: "DOCKER_HUB_PASSWORD",
        value: "{{ global.DOCKER_HUB_PASSWORD }}",
        masked: true,
      }
    - {
        key: "DOCKER_HUB_REPO",
        value: "{{ global.DOCKER_HUB_REPO }}",
        masked: true,
      }
  register: billing_service_docker_vars
  ignore_errors: yes
  when: billing_service_project is defined and billing_service_project.json is defined
  no_log: true

- name: Set Docker Hub credentials for Inventory Service project
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ inventory_service_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.key }}"
      value: "{{ item.value | trim }}"
      protected: "{{ item.protected | default(true) }}"
      masked: "{{ item.masked | default(true) }}"
    status_code: [201, 400]
  loop:
    - {
        key: "DOCKER_HUB_USERNAME",
        value: "{{ global.DOCKER_HUB_USERNAME }}",
        masked: false,
      }
    - {
        key: "DOCKER_HUB_PASSWORD",
        value: "{{ global.DOCKER_HUB_PASSWORD }}",
        masked: true,
      }
    - {
        key: "DOCKER_HUB_REPO",
        value: "{{ global.DOCKER_HUB_REPO }}",
        masked: true,
      }
  register: inventory_service_docker_vars
  ignore_errors: yes
  when: inventory_service_project is defined and inventory_service_project.json is defined
  no_log: true

- name: Get GitLab runner registration token
  uri:
    url: "{{ gitlab_url }}/api/v4/user/runners"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      description: "Docker Runner"
      tag_list: "docker,microservices,infra"
      run_untagged: true
      locked: false
      runner_type: "instance_type"
    status_code: [201, 400, 409]
    validate_certs: "{{ gitlab_validate_certs }}"
    return_content: true
  register: runner_response
  ignore_errors: yes

- name: Set runner registration token fact
  set_fact:
    gitlab_runner_token: "{{ runner_response.json.token }}"
  when: runner_response is defined and runner_response.json is defined and runner_response.json.token is defined

- name: Display runner token
  debug:
    msg: "Runner Registration Token: {{ gitlab_runner_token | default('Token not available') }}"

- name: Unregister all existing GitLab runners
  shell: |
    docker exec gitlab-runner gitlab-runner unregister --all-runners
  register: runner_unregister
  ignore_errors: yes

- name: Register GitLab runner
  shell: |
    docker exec gitlab-runner gitlab-runner register \
        --non-interactive \
        --url "{{ gitlab_url }}" \
        --token "{{ gitlab_runner_token }}" \
        --executor "docker" \
        --docker-image alpine:latest \
        --description "Docker Runner" \
        --docker-privileged \
        --docker-volumes "/var/run/docker.sock:/var/run/docker.sock" \
        --docker-network-mode "host"
  register: runner_registration
  failed_when: >
    runner_registration.rc != 0 and 
    "already exists" not in runner_registration.stderr and
    "is already registered" not in runner_registration.stderr
  changed_when: runner_registration.rc == 0
  when: gitlab_runner_token is defined

- name: Get Terraform project ID
  uri:
    url: "{{ gitlab_url }}/api/v4/projects?search=terraform"
    method: GET
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    status_code: 200
    return_content: true
  register: terraform_project
  ignore_errors: yes

- name: Set AWS credentials for Terraform project
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ terraform_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.key }}"
      value: "{{ item.value }}"
      protected: "{{ item.protected | default(false) }}"
      masked: "{{ item.masked | default(true) }}"
    status_code: [201, 400]
  loop:
    - {
        key: "AWS_DEFAULT_REGION",
        value: "{{ global.AWS_DEFAULT_REGION }}",
        masked: false,
      }
    - {
        key: "AWS_ACCESS_KEY_ID",
        value: "{{ global.AWS_ACCESS_KEY_ID }}",
        masked: true,
      }
    - {
        key: "AWS_SECRET_ACCESS_KEY",
        value: "{{ global.AWS_SECRET_ACCESS_KEY }}",
        masked: true,
      }
    - {
        key: "DOCKER_HUB_USERNAME",
        value: "{{ global.DOCKER_HUB_USERNAME }}",
        masked: false,
      }
    - {
        key: "DOCKER_HUB_PASSWORD",
        value: "{{ global.DOCKER_HUB_PASSWORD }}",
        masked: true,
      }
  register: terraform_vars_global
  ignore_errors: yes
  when: terraform_project is defined and terraform_project.json is defined and terraform_project.json | length > 0
  no_log: true

- name: Set Terraform variables for infrastructure project
  uri:
    url: "{{ gitlab_url }}/api/v4/projects/{{ terraform_project.json[0].id }}/variables"
    method: POST
    headers:
      PRIVATE-TOKEN: "{{ gitlab_api_token }}"
    body_format: json
    body:
      key: "{{ item.key }}"
      value: "{{ item.value }}"
      protected: "{{ item.protected | default(true) }}"
      masked: "{{ item.masked | default(false) }}"
    status_code: [201, 400]
  loop:
    # Common Terraform variables
    - {
        key: "TF_VAR_cli_admin_username",
        value: "{{ terraform.common.TF_VAR_cli_admin_username }}",
      }
    # Staging environment variables
    - {
        key: "TF_VAR_STAGING_vpc_cidr",
        value: "{{ terraform.staging.TF_VAR_vpc_cidr }}",
      }
    - {
        key: "TF_VAR_STAGING_public_subnet_cidrs",
        value: "{{ terraform.staging.TF_VAR_public_subnet_cidrs | to_json }}",
      }
    - {
        key: "TF_VAR_STAGING_private_subnet_cidrs",
        value: "{{ terraform.staging.TF_VAR_private_subnet_cidrs | to_json }}",
      }
    - {
        key: "TF_VAR_STAGING_availability_zones",
        value: "{{ terraform.staging.TF_VAR_availability_zones | to_json }}",
      }
    - {
        key: "TF_VAR_STAGING_cluster_name",
        value: "{{ terraform.staging.TF_VAR_cluster_name }}",
      }
    - {
        key: "TF_VAR_STAGING_cluster_version",
        value: "{{ terraform.staging.TF_VAR_cluster_version }}",
      }
    - {
        key: "TF_VAR_STAGING_node_instance_types",
        value: "{{ terraform.staging.TF_VAR_node_instance_types | to_json }}",
      }
    - {
        key: "TF_VAR_STAGING_capacity_type",
        value: "{{ terraform.staging.TF_VAR_capacity_type }}",
      }
    - {
        key: "TF_VAR_STAGING_desired_capacity",
        value: "{{ terraform.staging.TF_VAR_desired_capacity }}",
      }
    - {
        key: "TF_VAR_STAGING_min_capacity",
        value: "{{ terraform.staging.TF_VAR_min_capacity }}",
      }
    - {
        key: "TF_VAR_STAGING_max_capacity",
        value: "{{ terraform.staging.TF_VAR_max_capacity }}",
      }
    # Production environment variables
    - {
        key: "TF_VAR_PROD_vpc_cidr",
        value: "{{ terraform.prod.TF_VAR_vpc_cidr }}",
      }
    - {
        key: "TF_VAR_PROD_public_subnet_cidrs",
        value: "{{ terraform.prod.TF_VAR_public_subnet_cidrs | to_json }}",
      }
    - {
        key: "TF_VAR_PROD_private_subnet_cidrs",
        value: "{{ terraform.prod.TF_VAR_private_subnet_cidrs | to_json }}",
      }
    - {
        key: "TF_VAR_PROD_availability_zones",
        value: "{{ terraform.prod.TF_VAR_availability_zones | to_json }}",
      }
    - {
        key: "TF_VAR_PROD_cluster_name",
        value: "{{ terraform.prod.TF_VAR_cluster_name }}",
      }
    - {
        key: "TF_VAR_PROD_cluster_version",
        value: "{{ terraform.prod.TF_VAR_cluster_version }}",
      }
    - {
        key: "TF_VAR_PROD_node_instance_types",
        value: "{{ terraform.prod.TF_VAR_node_instance_types | to_json }}",
      }
    - {
        key: "TF_VAR_PROD_capacity_type",
        value: "{{ terraform.prod.TF_VAR_capacity_type }}",
      }
    - {
        key: "TF_VAR_PROD_desired_capacity",
        value: "{{ terraform.prod.TF_VAR_desired_capacity }}",
      }
    - {
        key: "TF_VAR_PROD_min_capacity",
        value: "{{ terraform.prod.TF_VAR_min_capacity }}",
      }
    - {
        key: "TF_VAR_PROD_max_capacity",
        value: "{{ terraform.prod.TF_VAR_max_capacity }}",
      }
  register: terraform_vars_result
  ignore_errors: yes
  when: terraform_project is defined and terraform_project.json is defined and terraform_project.json | length > 0
  no_log: true
